// Include the V5 Library
#include "vex.h"
  
// Allows for easier use of the VEX Library
using namespace vex;

double Magnet_duration = 500.0;
int Brain_precision = 0, Console_precision = 0;

float myVariable;

event message1 = event();

// "when EStop pressed" hat block
void onevent_EStop_pressed_0() {
  RoboticArm1.emergencyStop();
}

// "when started" hat block
int whenStarted1() {
  // INITIALIZATION
  Brain.Screen.print("Press Me");
  RoboticArm1.setMasteringValues(1862.0,2211.0,1875.0,589.0);
  RoboticArm1.setToolTipOffset(-0.7, 0.0, -2.0);
  Magnet.setPower(100.0);
  Magnet_duration = 1000;
  Optic.setLightPower(100.0, percent);
  return 0;
}

// "when Brain screen pressed" hat block
void onevent_Brain_screen_pressed_0() {
  wait(0.5, seconds);
  RoboticArm1.moveToPositionJoint(7.0, -7.0, 5.0);
  wait(0.5, seconds);
  RoboticArm1.moveToPositionJoint(9.0, -7.2, 4.0);
  wait(1.0, seconds);
  RoboticArm1.moveToPositionJoint(9.0, -7.2, 0.7);
  wait(0.5, seconds);
  Magnet.pickup(Magnet_duration);
  RoboticArm1.moveToPositionJoint(9.0, -7.2, 4.0);
  wait(0.5, seconds);
  // DROPOFF CONDITIONS
  RoboticArm1.moveToPositionJoint(7.8, -2.5, 3.9);
  wait(0.5, seconds);
  RoboticArm1.moveToPositionJoint(8.6, -3.3, 2.5);
  if (Optic.color() == red) {
    // TO RED DROPOFF
    wait(1.0, seconds);
    RoboticArm1.moveToPositionJoint(10.5, 2.5, 2.0);
    wait(0.5, seconds);
    Magnet.drop();
  } else if (Optic.color() == blue) {
    // TO BLUE DROPOFF
    wait(1.0, seconds);
    RoboticArm1.moveToPositionJoint(7.7, 2.4, 2.0);
    wait(0.5, seconds);
    Magnet.drop();
  } else if (Optic.color() == green) {
    // TO GREEN DROPOFF
    wait(1.0, seconds);
    RoboticArm1.moveToPositionJoint(7.6, 5.1, 2.0);
    wait(0.5, seconds);
    Magnet.drop();
  } else {
    wait(1.0, seconds);
    RoboticArm1.moveToPositionJoint(9.05, -7.25, 4.0);
    wait(0.5, seconds);
  }
}


int main() {
  // register event handlers
  EStop.pressed(onevent_EStop_pressed_0);
  Brain.Screen.pressed(onevent_Brain_screen_pressed_0);

  wait(15, msec);
  // post event registration

  // set default print color to black
  printf("\033[30m");

  // wait for rotation sensor to fully initialize
  wait(30, msec);

  whenStarted1();
}
